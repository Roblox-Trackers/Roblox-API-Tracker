{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Groups Api v1"
  },
  "host": "groups.roblox.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/v1/groups/{groupId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets group information",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupDetailResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroup"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/audit-log": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the Group's audit log",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the group the user is in.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "actionType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DeletePost",
              "RemoveMember",
              "AcceptJoinRequest",
              "DeclineJoinRequest",
              "PostStatus",
              "ChangeRank",
              "BuyAd",
              "SendAllyRequest",
              "CreateEnemy",
              "AcceptAllyRequest",
              "DeclineAllyRequest",
              "DeleteAlly",
              "DeleteEnemy",
              "AddGroupPlace",
              "RemoveGroupPlace",
              "CreateItems",
              "ConfigureItems",
              "SpendGroupFunds",
              "ChangeOwner",
              "Delete",
              "AdjustCurrencyAmounts",
              "Abandon",
              "Claim",
              "Rename",
              "ChangeDescription",
              "InviteToClan",
              "KickFromClan",
              "CancelClanInvite",
              "BuyClan",
              "CreateGroupAsset",
              "UpdateGroupAsset",
              "ConfigureGroupAsset",
              "RevertGroupAsset",
              "CreateGroupDeveloperProduct",
              "ConfigureGroupGame",
              "Lock",
              "Unlock",
              "CreateGamePass",
              "CreateBadge",
              "ConfigureBadge",
              "SavePlace",
              "PublishPlace",
              "UpdateRolesetRank",
              "UpdateRolesetData"
            ]
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filter for specific user id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order the results are sorted in.",
            "required": false,
            "type": "string",
            "default": "Asc",
            "enum": [
              "Asc",
              "Desc"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The amount of results per request.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "enum": [
              10,
              25,
              50,
              100
            ]
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "The paging cursor for the previous or next page.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupAuditLogPageResponse[Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem]"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "23: Insufficient permissions to complete the request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroupAuditLog"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/join-requests": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Gets a page of Group Join Requests for a group.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sorted by group join request creation date",
            "required": false,
            "type": "string",
            "default": "Asc",
            "enum": [
              "Asc",
              "Desc"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The amount of results per request.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "enum": [
              10,
              25,
              50,
              100
            ]
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "The paging cursor for the previous or next page.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.GroupJoinRequestResponse]"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "19: You have insufficient permissions for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupJoinRequestsByGroup"
          ]
        }
      },
      "post": {
        "tags": [
          "Membership"
        ],
        "summary": "Batch accepts group join requests",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.MembersRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.MembersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n20: The group join request is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are already in the maximum number of groups.\r\n19: You have insufficient permissions for this request."
          },
          "500": {
            "description": "0: Something went wrong."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:AcceptBatchJoinRequests"
          ]
        }
      },
      "delete": {
        "tags": [
          "Membership"
        ],
        "summary": "Batch declines group join requests",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.MembersRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.MembersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:DeleteBatchJoinRequests"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/join-requests/users/{userId}": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Gets a group join request by userId.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The user Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupJoinRequestResponse"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "19: You have insufficient permissions for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupJoinRequestByGroupAndUser"
          ]
        }
      },
      "post": {
        "tags": [
          "Membership"
        ],
        "summary": "Accepts a group join request.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The user Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n20: The group join request is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are already in the maximum number of groups.\r\n19: You have insufficient permissions for this request."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:AcceptJoinRequest"
          ]
        }
      },
      "delete": {
        "tags": [
          "Membership"
        ],
        "summary": "Declines/cancels a group join request.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The user Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "3: The user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: You do not have permission to manage this member."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:DeleteJoinRequest"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/membership": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Gets group membership information in the context of the authenticated user",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupMembershipMetadataResponse"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupMembership"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/payout-restriction": {
      "get": {
        "tags": [
          "Revenue"
        ],
        "summary": "Gets a value indicating whether the group can use payout feature",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupPayoutRestrictionResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "9: You don't have permission to view this group's payouts."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Revenue:GetGroupPayoutRestriction"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/payouts": {
      "get": {
        "tags": [
          "Revenue"
        ],
        "summary": "Gets a list of the group payout percentages",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupPayoutResponse]"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "9: You don't have permission to view this group's payouts."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Revenue:GetGroupPayouts"
          ]
        }
      },
      "post": {
        "tags": [
          "Revenue"
        ],
        "summary": "Pays out a user in Robux.",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.PayoutRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.PayoutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n12: Insufficient Robux funds.\r\n24: Invalid payout type.\r\n25: The amount is invalid.\r\n26: Too many recipients."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n23: Insufficient permissions to complete the request.\r\n28: Group has paid out too recently. Please wait and try again."
          },
          "503": {
            "description": "22: The feature is disabled."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Revenue:MakeOneTimePayout"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Gets a group's relationships",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "groupRelationshipType",
            "in": "path",
            "description": "The group relationship type, enemies or allies.",
            "required": true,
            "type": "string"
          },
          {
            "name": "model.startRowIndex",
            "in": "query",
            "description": "The start index of the page request",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model.maxRows",
            "in": "query",
            "description": "The maximum number of rows for the page request, should be at least 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupRelationshipsResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n4: Group relationship type or request type is invalid.\r\n8: Invalid or missing pagination parameters"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:GetRelatedGroups"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}/requests": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Gets a group's relationship requests",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "groupRelationshipType",
            "in": "path",
            "description": "The group relationship type of the request, only allies are supported.",
            "required": true,
            "type": "string"
          },
          {
            "name": "model.startRowIndex",
            "in": "query",
            "description": "The start index of the page request",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model.maxRows",
            "in": "query",
            "description": "The maximum number of rows for the page request, should be at least 1.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupRelationshipsResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n4: Group relationship type or request type is invalid.\r\n8: Invalid or missing pagination parameters"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "5: You don't have permission to manage this group's relationships."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:GetGroupRelationshipRequests"
          ]
        }
      },
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "Batch accepts group affiliate requests",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "groupRelationshipType",
            "in": "path",
            "description": "The type of group relationship being made",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.RelationshipsRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.RelationshipsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:AcceptBatchAffiliateRequests"
          ]
        }
      },
      "delete": {
        "tags": [
          "Relationships"
        ],
        "summary": "Batch declines group affiliate requests",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "groupRelationshipType",
            "in": "path",
            "description": "The type of group relationship being made",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.RelationshipsRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.RelationshipsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:DeclineBatchAffiliateRequests"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/roles": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Gets a list of the rolesets in a group.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupAllRolesResponse"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetRolesInGroup"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/roles/{roleSetId}/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Gets the permissions for a group's roleset. The authorized user must either be the group owner or the roleset being requested, except for guest roles, which can be viewed by all (members and guests).",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "roleSetId",
            "in": "path",
            "description": "The group's role set id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupPermissionsResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n2: The roleset is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "3: You are not authorized to view/edit permissions for this role."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Permissions:GetPermissionsForGroupRole"
          ]
        }
      },
      "patch": {
        "tags": [
          "Permissions"
        ],
        "summary": "Updates the permissions for a group's roleset. The authorized user must be the group owner.",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group's id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "roleSetId",
            "in": "path",
            "description": "The roleset's id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "updatePermissionsRequest",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.UpdatePermissionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n2: The roleset is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: You are not authorized to view/edit permissions for this role.\r\n4: This role's permissions can not be modified."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Permissions:UpdatePermissionsForGroupRole"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/roles/{roleSetId}/users": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Gets a list of users in a group for a specific roleset.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "roleSetId",
            "in": "path",
            "description": "The group's role set id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sorted by user group join date",
            "required": false,
            "type": "string",
            "default": "Asc",
            "enum": [
              "Asc",
              "Desc"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The amount of results per request.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "enum": [
              10,
              25,
              50,
              100
            ]
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "The paging cursor for the previous or next page.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.Models.Response.UserModel]"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "403": {
            "description": "2: The roleset is invalid or does not exist."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupMembersInRole"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/roles/guest/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Gets the permissions for a group's guest roleset. These can be viewed by all (members and guests) users.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupPermissionsResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Permissions:GetPermissionsForGroupGuestRole"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/roles/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Gets all permissions for each role",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupPermissionsResponse]"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Permissions:GetPermissionsForAllRoles"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/settings": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the Group's settings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the group the user is in.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupSettingsResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "23: Insufficient permissions to complete the request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroupSettings"
          ]
        }
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Updates the group's settings",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the group the user is in.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "{Roblox.Groups.Api.UpdateGroupSettingsRequest}",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.UpdateGroupSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n23: Insufficient permissions to complete the request."
          },
          "503": {
            "description": "31: Service is currently unavailable."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:UpdateGroupSettings"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/social-links": {
      "get": {
        "tags": [
          "SocialLinks"
        ],
        "summary": "Get social link data associated with a group",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The Id of the game",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.SocialLinkResponse]"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "13: Only users who are over thirteen years of age may edit social links."
          },
          "404": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "SocialLinks:GetSocialLinks"
          ]
        }
      },
      "post": {
        "tags": [
          "SocialLinks"
        ],
        "summary": "Posts a social links",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the game",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.SocialLinkRequest}",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.SocialLinkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.SocialLinkResponse"
            }
          },
          "400": {
            "description": "3: The social link title is too long.\r\n4: The social link title cannot be empty.\r\n5: The social link url cannot be empty.\r\n7: The request was null.\r\n9: The social link type is invalid.\r\n12: The social link title was moderated."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to configure this social link."
          },
          "404": {
            "description": "8: The requested group or social link was not found."
          },
          "503": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "SocialLinks:PostSocialLink"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/users": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Gets a list of users in a group.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order the results are sorted in.",
            "required": false,
            "type": "string",
            "default": "Asc",
            "enum": [
              "Asc",
              "Desc"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The amount of results per request.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "enum": [
              10,
              25,
              50,
              100
            ]
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "The paging cursor for the previous or next page.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.UserGroupRoleResponse]"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupMembers"
          ]
        }
      },
      "post": {
        "tags": [
          "Membership"
        ],
        "summary": "Joins a group",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "joinGroupModel",
            "in": "body",
            "description": "Only supplied when captcha has been solved.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.JoinGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: You must pass the captcha test before joining this group.\r\n6: You are already in the maximum number of groups.\r\n9: You do not have the builders club membership necessary to join this group.\r\n14: You cannot join a closed group."
          },
          "409": {
            "description": "7: You have already requested to join this group.\r\n8: You are already a member of this group."
          },
          "429": {
            "description": "10: Too many attempts to join the group. Please try again later."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:JoinGroup"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/wall/posts": {
      "get": {
        "tags": [
          "Wall"
        ],
        "summary": "Gets a list of group wall posts.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sorted by group wall post Id",
            "required": false,
            "type": "string",
            "default": "Asc",
            "enum": [
              "Asc",
              "Desc"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The amount of results per request.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "enum": [
              10,
              25,
              50,
              100
            ]
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "The paging cursor for the previous or next page.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.Models.Response.GroupWallPostModel]"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "403": {
            "description": "2: You do not have permission to access this group wall."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Wall:GetGroupWallPosts"
          ]
        }
      },
      "post": {
        "tags": [
          "Wall"
        ],
        "summary": "Creates a post on a group wall",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.CreateWallPostRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.CreateWallPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.GroupWallPostModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n5: Your post was empty, white space, or more than 500 characters."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall.\r\n7: Captcha must be solved."
          },
          "429": {
            "description": "4: You are posting too fast, please try again in a few minutes."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Wall:CreateGroupWallPosts"
          ]
        }
      }
    },
    "/v1/groups/configuration/metadata": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets Group configuration contextual information",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupConfigurationDisplayOptionsResponse"
            }
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroupConfigurationDisplayOptions"
          ]
        }
      }
    },
    "/v1/groups/metadata": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets Groups contextual information:\r\nMax number of groups a user can be part of. \r\nCurrent number of groups a user is a member of. \r\nWhether to show/hide certain features based on device type.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupsDisplayOptionsResponse"
            }
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroupDisplayOptions"
          ]
        }
      }
    },
    "/v1/groups/search": {
      "get": {
        "tags": [
          "GroupSearch"
        ],
        "summary": "Search for groups by keyword.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "description": "The keyword or phrase to use as the search parameter.",
            "required": true,
            "type": "string"
          },
          {
            "name": "prioritizeExactMatch",
            "in": "query",
            "description": "Whether or not to prioritize the exact match for the keyword (optional, defaults to false.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The amount of results per request.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "enum": [
              10,
              25,
              50,
              100
            ]
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "The paging cursor for the previous or next page.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupSearchPageResponse"
            }
          },
          "400": {
            "description": "2: Search term not appropriate for Roblox.\r\n3: Search term was left empty.\r\n4: Search terms can be 2 to 50 characters long."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "GroupSearch:SearchGroups"
          ]
        }
      }
    },
    "/v1/groups/search/lookup": {
      "get": {
        "tags": [
          "GroupSearch"
        ],
        "summary": "Looks up groups by a name. Prioritizes an exact match as the first result.",
        "description": "Should only be used for direct lookups where a user is inputting a group name, shouldn't be used for search pages.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupName",
            "in": "query",
            "description": "The group name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Web.Responses.Groups.GroupBasicResponse]"
            }
          },
          "400": {
            "description": "1: Name is missing or has invalid characters."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "GroupSearch:LookupGroupsByName"
          ]
        }
      }
    },
    "/v1/groups/search/metadata": {
      "get": {
        "tags": [
          "GroupSearch"
        ],
        "summary": "Get suggested groups and other miscellaneous information needed for the group/join page like flags",
        "description": "Although there is no reason for this to require an authenticated user right now, in the future,\r\nwe will use coco to return different suggested groups based upon that user's request context",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupSearchMetadataResponse"
            }
          },
          "404": {
            "description": "5: No Localized Version of group search category exists"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "GroupSearch:GetGroupSearchMetadata"
          ]
        }
      }
    },
    "/v1/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Gets the Roles by their ids.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "A list of role ids",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupRoleDetailResponse]"
            }
          },
          "400": {
            "description": "1: Ids could not be parsed from request.\r\n2: Too many ids in request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Roles:GetGroupRoleSets"
          ]
        }
      }
    },
    "/v1/user/groups/pending": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Gets groups that the authenticated user has requested to join",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupDetailResponse]"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetPendingGroupJoins"
          ]
        }
      }
    },
    "/v1/users/{userId}/friends/groups/roles": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Gets a list of all groups the specified users' friends are in.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.UserGroupMembershipResponse]"
            }
          },
          "400": {
            "description": "3: The user is invalid or does not exist."
          },
          "401": {
            "description": "3: The user is invalid or does not exist."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetFriendGroupMemberships"
          ]
        }
      }
    },
    "/v1/users/{userId}/groups/primary/role": {
      "get": {
        "tags": [
          "PrimaryGroup"
        ],
        "summary": "Gets a user's primary group.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupMembershipDetailResponse"
            }
          },
          "400": {
            "description": "4: User is invalid or does not exist."
          },
          "404": {
            "description": "3: The user specified does not have a primary group."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "PrimaryGroup:GetPrimaryGroup"
          ]
        }
      }
    },
    "/v1/users/{userId}/groups/roles": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Gets a list of all group roles for groups the specified user is in.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupMembershipDetailResponse]"
            }
          },
          "400": {
            "description": "3: The user is invalid or does not exist."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupMemberships"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/change-owner": {
      "post": {
        "tags": [
          "Membership"
        ],
        "summary": "Changes the group owner to another user.",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "changeOwnerRequest",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.ChangeOwnerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n15: User is not a member of the group.\r\n16: The user does not have the necessary level of premium membership.\r\n24: You cannot perform this action with a locked pin."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n17: You are not authorized to change the owner of this group."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:ChangeOwner"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/claim-ownership": {
      "post": {
        "tags": [
          "Membership"
        ],
        "summary": "Claims ownership of the group as the authenticated user",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n11: You are not authorized to claim this group\r\n12: This group already has an owner\r\n13: Too many attempts to claim groups. Please try again later."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:ClaimGroupOwnership"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/payouts/recurring": {
      "post": {
        "tags": [
          "Revenue"
        ],
        "summary": "Updates recurring payouts.",
        "description": "This endpoint will remove any recipients not sent in the request.\r\nIf a recipient in the request is not a valid member in the group they will not be added to the recurring payouts.",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.PayoutRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.PayoutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n24: Invalid payout type.\r\n25: The amount is invalid.\r\n26: Too many recipients.\r\n27: The recipients are invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n12: Insufficient Robux funds.\r\n28: Group has paid out too recently. Please wait and try again."
          },
          "503": {
            "description": "22: The feature is disabled."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Revenue:UpdateRecurringPayouts"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}/{relatedGroupId}": {
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "Create a group relationship.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "groupRelationshipType",
            "in": "path",
            "description": "The group relationship type, enemies or allies.",
            "required": true,
            "type": "string"
          },
          {
            "name": "relatedGroupId",
            "in": "path",
            "description": "The id of the group you want to create a relationship with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group relationship type or request type is invalid.\r\n2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n4: Your group cannot establish a relationship with itself."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: Your group does not allow enemy declarations.\r\n6: Other group does not allow enemy declarations.\r\n7: Your group already has a relationship with the target group.\r\n8: You are blocked from communicating with this user.\r\n9: Insufficient permissions."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:CreateGroupRelationship"
          ]
        }
      },
      "delete": {
        "tags": [
          "Relationships"
        ],
        "summary": "Deletes a group relationship.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "groupRelationshipType",
            "in": "path",
            "description": "The group relationship type, enemies or allies.",
            "required": true,
            "type": "string"
          },
          {
            "name": "relatedGroupId",
            "in": "path",
            "description": "The id of the group you want to delete the relationship with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n11: Relationship does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: You are blocked from communicating with this user."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:DeleteGroupRelationship"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}/requests/{relatedGroupId}": {
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "Accepts a group relationship request.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "groupRelationshipType",
            "in": "path",
            "description": "The group relationship type, enemies or allies, only allies are supported.",
            "required": true,
            "type": "string"
          },
          {
            "name": "relatedGroupId",
            "in": "path",
            "description": "The id of the group you want to accept the relationship request with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group relationship type or request type is invalid.\r\n2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n10: Relationship request does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: Insufficient permissions."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:AcceptRelationshipRequest"
          ]
        }
      },
      "delete": {
        "tags": [
          "Relationships"
        ],
        "summary": "Declines a group relationship request.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "groupRelationshipType",
            "in": "path",
            "description": "The group relationship type, enemies or allies.",
            "required": true,
            "type": "string"
          },
          {
            "name": "relatedGroupId",
            "in": "path",
            "description": "The id of the group you want to accept the relationship request with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group relationship type or request type is invalid.\r\n2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n10: Relationship request does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: Insufficient permissions."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:DeclineRelationshipRequest"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/rolesets/create": {
      "post": {
        "tags": [
          "RoleSets"
        ],
        "summary": "Creates new group roleset.",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.Models.Request.CreateRoleSetRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.Models.Request.CreateRoleSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse"
            }
          },
          "400": {
            "description": "0: Something went wrong.\r\n3: You do not have enough funds to purchase this role.\r\n5: Role name already exists.\r\n6: Rank value is out of bounds.\r\n7: The role name is too long.\r\n8: The role description is too long.\r\n10: This group does not exist.\r\n11: Failed to process payment to purchase role.\r\n12: Limit for roles have been reached on this group.\r\n14: Role name can not be empty.\r\n15: This role does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: You do not have permissions to perform this action."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "RoleSets:CreateRoleset"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/wall/subscribe": {
      "post": {
        "tags": [
          "Wall"
        ],
        "summary": "Subscribes the authenticated user to notifications of group wall events.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Wall:Subscribe"
          ]
        }
      }
    },
    "/v1/groups/create": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Creates a new group.",
        "description": "This endpoint will charge Robux for the group purchase.\r\nHttp status code 413 is thrown when the group icon file size is too large.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "request.name",
            "in": "formData",
            "description": "The name of the group.",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.description",
            "in": "formData",
            "description": "The group description.",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.publicGroup",
            "in": "formData",
            "description": "Whether or not the group is open for anyone to join.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "request.buildersClubMembersOnly",
            "in": "formData",
            "description": "Whether or not the group is only open to join for builders club members.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "request.files",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.Responses.Groups.GroupResponseV2"
            }
          },
          "400": {
            "description": "13: The name is invalid.\r\n15: The group icon is invalid.\r\n16: The group icon is missing from the request.\r\n18: The description is too long.\r\n19: The name is too long.\r\n20: The name has been taken."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n10: User must have builders club membership.\r\n11: User is in maximum number of groups.\r\n12: Insufficient Robux funds.\r\n14: The name is moderated."
          },
          "413": {
            "description": "0: Unknown error."
          },
          "429": {
            "description": "17: Too many requests."
          },
          "503": {
            "description": "21: Group creation is currently disabled."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:CreateGroup"
          ]
        }
      }
    },
    "/v1/groups/policies": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets group policy info used for compliance.",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupPolicyRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupPolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupPoliciesResponse"
            }
          },
          "400": {
            "description": "1: Too many ids in request.\r\n2: Ids could not be parsed from request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroupPolicies"
          ]
        }
      }
    },
    "/v1/user/groups/primary": {
      "post": {
        "tags": [
          "PrimaryGroup"
        ],
        "summary": "Sets the authenticated user's primary group",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request body containing the group id.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.PrimaryGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You aren't a member of the group specified."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "PrimaryGroup:SetPrimaryGroup"
          ]
        }
      },
      "delete": {
        "tags": [
          "PrimaryGroup"
        ],
        "summary": "Removes the authenticated user's primary group",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "PrimaryGroup:ClearPrimaryGroup"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/description": {
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Updates the groups description",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the group the user is in.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.UpdateGroupDescriptionRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.UpdateGroupDescriptionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupDescriptionResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n29: Your group description was empty."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: The description is too long.\r\n23: Insufficient permissions to complete the request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:UpdateGroupDescription"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/rolesets/{rolesetId}": {
      "delete": {
        "tags": [
          "RoleSets"
        ],
        "summary": "Deletes existing group roleset.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rolesetId",
            "in": "path",
            "description": "The roleset Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "10: This group does not exist.\r\n15: This role does not exist.\r\n17: Cannot remove any more roles\r\n18: Cannot delete this role."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: You do not have permissions to perform this action.\r\n16: There are users in this role."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "RoleSets:DeleteRoleset"
          ]
        }
      },
      "patch": {
        "tags": [
          "RoleSets"
        ],
        "summary": "Updates existing group roleset.",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rolesetId",
            "in": "path",
            "description": "The roleset Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.Models.Request.UpdateRoleSetRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.Models.Request.UpdateRoleSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse"
            }
          },
          "400": {
            "description": "5: Role name already exists.\r\n6: Rank value is out of bounds.\r\n7: The role name is too long.\r\n8: The role description is too long.\r\n10: This group does not exist.\r\n14: Role name can not be empty.\r\n15: This role does not exist.\r\n19: Cannot update Guest role.\r\n20: Cannot update Owner role rank."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: You do not have permissions to perform this action."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "RoleSets:UpdateRoleset"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/social-links/{socialLinkId}": {
      "delete": {
        "tags": [
          "SocialLinks"
        ],
        "summary": "Deletes a social link",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the game you are editting, required for permissions checking",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "socialLinkId",
            "in": "path",
            "description": "The id of the social link",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n10: The social link is not for a group.\r\n15: The social link id doesn't match the group id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to configure this social link.\r\n13: Only users who are over thirteen years of age may edit social links."
          },
          "404": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "SocialLinks:DeleteSocialLink"
          ]
        }
      },
      "patch": {
        "tags": [
          "SocialLinks"
        ],
        "summary": "Updates a social link",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the universe",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "socialLinkId",
            "in": "path",
            "description": "The id of the social link being updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.SocialLinkRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.SocialLinkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n3: The social link title is too long.\r\n4: The social link title cannot be empty.\r\n5: The social link url cannot be empty.\r\n6: The social link url was improperly formatted.\r\n7: The request was null.\r\n8: The requested group or social link was not found.\r\n9: The social link type is invalid.\r\n10: The social link is not for a group.\r\n12: The social link title was moderated.\r\n16: A social link with this type already exists on this group."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to configure this social link."
          },
          "404": {
            "description": "11: Social links cannot be processed as this time."
          },
          "503": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "SocialLinks:UpdateSocialLink"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/status": {
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Sets group status",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "statusRequest",
            "in": "body",
            "description": "The {Roblox.Groups.Api.PostGroupStatusRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.PostGroupStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.ShoutResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n6: You are not authorized to set the status of this group\r\n7: Missing group status content."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:SetGroupStatus"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/users/{userId}": {
      "delete": {
        "tags": [
          "Membership"
        ],
        "summary": "Removes a user from a group",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The Id of the user being removed.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: You do not have permission to manage this member.\r\n24: You cannot perform this action with a locked pin."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:RemoveGroupMember"
          ]
        }
      },
      "patch": {
        "tags": [
          "Membership"
        ],
        "summary": "Updates a users role in a group.",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the group the user is in.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user being updated.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The {Roblox.Groups.Api.UpdateUserRoleRequest}.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.UpdateUserRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n2: The roleset is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n23: You cannot change your own role."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: You do not have permission to manage this member."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:UpdateUserGroupRole"
          ]
        }
      }
    },
    "/v1/groups/icon": {
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Updates the group icon.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "The group Id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request.files",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n16: The group icon is missing from the request.\r\n17: Too many requests.\r\n30: Invalid file type for group icon."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n23: Insufficient permissions to complete the request."
          },
          "413": {
            "description": "0: Unknown error."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:ChangeGroupIcon"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/wall/posts/{postId}": {
      "delete": {
        "tags": [
          "Wall"
        ],
        "summary": "Deletes a group wall post.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "postId",
            "in": "path",
            "description": "The group wall post id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The group wall post id is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Wall:DeleteWallPost"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/wall/users/{userId}/posts": {
      "delete": {
        "tags": [
          "Wall"
        ],
        "summary": "Deletes all group wall posts made by a specific user.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The user id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n6: The user specified is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Wall:DeleteAllPostsByUser"
          ]
        }
      }
    }
  },
  "definitions": {
    "Roblox.Groups.Api.GroupDetailResponse": {
      "description": "A detailed group response model",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The group id",
          "type": "integer"
        },
        "name": {
          "description": "The group name",
          "type": "string"
        },
        "description": {
          "description": "The group description",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel",
          "description": "The owner of the group"
        },
        "shout": {
          "$ref": "#/definitions/Roblox.Groups.Api.ShoutResponse",
          "description": "The group shout/status"
        },
        "memberCount": {
          "format": "int32",
          "description": "The number of members in the group",
          "type": "integer"
        },
        "isBuildersClubOnly": {
          "description": "Whether the group is Builders Club only",
          "type": "boolean"
        },
        "publicEntryAllowed": {
          "description": "Whether the group is public (no approval required)",
          "type": "boolean"
        },
        "isLocked": {
          "description": "Whether the group is locked",
          "type": "boolean"
        }
      }
    },
    "Roblox.Groups.Api.Models.Response.UserModel": {
      "description": "A model representing data about an {Roblox.Platform.Membership.IUser}",
      "type": "object",
      "properties": {
        "buildersClubMembershipType": {
          "description": "The user's builders club membership type",
          "enum": [
            "None",
            "BC",
            "TBC",
            "OBC",
            "RobloxPremium"
          ],
          "type": "string"
        },
        "userId": {
          "format": "int64",
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "Roblox.Groups.Api.ShoutResponse": {
      "type": "object",
      "properties": {
        "body": {
          "description": "The shout's message",
          "type": "string"
        },
        "poster": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel",
          "description": "The shout's poster"
        },
        "created": {
          "format": "date-time",
          "description": "The shout's created time",
          "type": "string"
        },
        "updated": {
          "format": "date-time",
          "description": "The shout's last updated time",
          "type": "string"
        }
      }
    },
    "Roblox.Groups.Api.CreateGroupRequest": {
      "description": "A request model for creating a new group.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the group.",
          "type": "string"
        },
        "description": {
          "description": "The group description.",
          "type": "string"
        },
        "publicGroup": {
          "description": "Whether or not the group is open for anyone to join.",
          "type": "boolean"
        },
        "buildersClubMembersOnly": {
          "description": "Whether or not the group is only open to join for builders club members.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Web.Responses.Groups.GroupResponseV2": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/Roblox.Web.Responses.RelatedEntityTypeResponse[Roblox.Web.Responses.Groups.GroupOwnerType]"
        },
        "memberCount": {
          "format": "int64",
          "type": "integer"
        },
        "shout": {
          "$ref": "#/definitions/Roblox.Web.Responses.Groups.GroupShoutResponse"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "Roblox.Web.Responses.RelatedEntityTypeResponse[Roblox.Web.Responses.Groups.GroupOwnerType]": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "type": {
          "enum": [
            "User"
          ],
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Roblox.Web.Responses.Groups.GroupShoutResponse": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "poster": {
          "$ref": "#/definitions/Roblox.Web.Responses.RelatedEntityTypeResponse[Roblox.Web.Responses.Groups.GroupShoutPosterType]"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "Roblox.Web.Responses.RelatedEntityTypeResponse[Roblox.Web.Responses.Groups.GroupShoutPosterType]": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "type": {
          "enum": [
            "User"
          ],
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Roblox.Groups.Api.ChangeIconRequest": {
      "description": "A request model for creating a new group.",
      "type": "object",
      "properties": {}
    },
    "Roblox.Web.WebAPI.ApiEmptyResponseModel": {
      "type": "object",
      "properties": {}
    },
    "Roblox.Groups.Api.GroupPolicyRequest": {
      "type": "object",
      "properties": {
        "groupIds": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    },
    "Roblox.Groups.Api.GroupPoliciesResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupPolicyResponse"
          }
        }
      }
    },
    "Roblox.Groups.Api.GroupPolicyResponse": {
      "type": "object",
      "properties": {
        "canViewGroup": {
          "type": "boolean"
        },
        "groupId": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.PostGroupStatusRequest": {
      "description": "A request model for setting the authenticated user's primary group.",
      "type": "object",
      "properties": {
        "message": {
          "description": "The message to set the group status to.",
          "type": "string"
        }
      }
    },
    "Roblox.Groups.Api.UpdateGroupDescriptionRequest": {
      "description": "A request model for setting a description for the group",
      "type": "object",
      "properties": {
        "description": {
          "description": "The group description being set.",
          "type": "string"
        }
      }
    },
    "Roblox.Groups.Api.GroupDescriptionResponse": {
      "type": "object",
      "properties": {
        "newDescription": {
          "description": "The new description returned",
          "type": "string"
        }
      }
    },
    "Roblox.Groups.Api.GroupSettingsResponse": {
      "description": "Response model for Group Settings",
      "type": "object",
      "properties": {
        "isApprovalRequired": {
          "description": "Whether public entry is allowed.",
          "type": "boolean"
        },
        "isBuildersClubRequired": {
          "description": "Whether Builder's Club is required.",
          "type": "boolean"
        },
        "areEnemiesAllowed": {
          "description": "Whether enemy club declarations are allowed.",
          "type": "boolean"
        },
        "areGroupFundsVisible": {
          "description": "Whether funds are publicly visible.",
          "type": "boolean"
        },
        "areGroupGamesVisible": {
          "description": "Whether games are publicly visible.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Groups.Api.UpdateGroupSettingsRequest": {
      "description": "A request model for updating a group's settings.",
      "type": "object",
      "properties": {
        "isApprovalRequired": {
          "description": "Whether public entry is allowed.",
          "type": "boolean"
        },
        "areEnemiesAllowed": {
          "description": "Whether enemy club declarations are allowed.",
          "type": "boolean"
        },
        "areGroupFundsVisible": {
          "description": "Whether funds are publicly visible.",
          "type": "boolean"
        },
        "areGroupGamesVisible": {
          "description": "Whether games are publicly visible.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Web.WebAPI.ExclusiveStartRequest[System.Int32]": {
      "type": "object",
      "properties": {
        "ExclusiveStartKeyInfo": {
          "$ref": "#/definitions/Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int32]",
          "readOnly": true
        },
        "CursorRecipe": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int32]": {
      "type": "object",
      "properties": {
        "SortOrder": {
          "enum": [
            "Asc",
            "Desc"
          ],
          "type": "string",
          "readOnly": true
        },
        "PagingDirection": {
          "enum": [
            "Forward",
            "Backward"
          ],
          "type": "string",
          "readOnly": true
        },
        "Count": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "Roblox.Groups.Api.GroupAuditLogPageResponse[Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem]": {
      "description": "ApiPageResponse for group audit log",
      "type": "object",
      "properties": {
        "previousPageCursor": {
          "type": "string"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem"
          }
        }
      }
    },
    "Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem": {
      "description": "A group audit log response model",
      "type": "object",
      "properties": {
        "actor": {
          "$ref": "#/definitions/Roblox.Groups.Api.UserGroupRoleResponse",
          "description": "The auditors username"
        },
        "actionType": {
          "description": "The action type",
          "type": "string"
        },
        "description": {
          "description": "Information on the action performed",
          "type": "object"
        },
        "created": {
          "format": "date-time",
          "description": "Date the group action was performed",
          "type": "string"
        }
      }
    },
    "Roblox.Groups.Api.UserGroupRoleResponse": {
      "description": "A user group role response model",
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel",
          "description": "The user"
        },
        "role": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse",
          "description": "The user's group role"
        }
      }
    },
    "Roblox.Groups.Api.GroupRoleResponse": {
      "description": "A group role response model",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The role id",
          "type": "integer"
        },
        "name": {
          "description": "The role name",
          "type": "string"
        },
        "description": {
          "description": "The role description",
          "type": "string"
        },
        "rank": {
          "format": "int32",
          "description": "The role rank",
          "type": "integer"
        },
        "memberCount": {
          "format": "int64",
          "description": "The number of members in the role.",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.GroupsDisplayOptionsResponse": {
      "description": "A group roles response model",
      "type": "object",
      "properties": {
        "groupLimit": {
          "format": "int32",
          "description": "The user's builders club membership group limit",
          "type": "integer"
        },
        "currentGroupCount": {
          "format": "int32",
          "description": "The user's current group membership count",
          "type": "integer"
        },
        "groupStatusMaxLength": {
          "format": "int32",
          "description": "The maximum length of a group status",
          "type": "integer"
        },
        "groupPostMaxLength": {
          "format": "int32",
          "description": "The maximum length of a group wall post",
          "type": "integer"
        },
        "isGroupWallNotificationsEnabled": {
          "description": "If set to true, group details will subscribe and respond to wall notifications.",
          "type": "boolean"
        },
        "groupWallNotificationsSubscribeIntervalInMilliseconds": {
          "format": "int32",
          "description": "Time in milliseconds between calls to subscribe to group wall notifications.",
          "type": "integer"
        },
        "areProfileGroupsHidden": {
          "description": "If set to true, groups showcase will not show on users profiles.\r\n            \r\nIf set to false, group showcase will display on users profiles.",
          "type": "boolean"
        },
        "isGroupDetailsPolicyEnabled": {
          "description": "If set to true, group details will respect GUAC policies for group details\r\n            \r\nIf set to false, group details will not respect GUAC policies",
          "type": "boolean"
        }
      }
    },
    "Roblox.Groups.Api.GroupConfigurationDisplayOptionsResponse": {
      "description": "A response model for group configuration",
      "type": "object",
      "properties": {
        "groupConfiguration": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupConfigurationResponse",
          "description": "The group configuration response"
        },
        "recurringPayoutsConfiguration": {
          "$ref": "#/definitions/Roblox.Groups.Api.RecurringPayoutsConfigurationResponse",
          "description": "The recurring payouts configuration response"
        },
        "roleConfiguration": {
          "$ref": "#/definitions/Roblox.Groups.Api.RoleConfigurationResponse",
          "description": "The role configuration response"
        },
        "isPremiumPayoutsEnabled": {
          "description": "The configuration of premium payouts shows in Group Revenue Summary page",
          "type": "boolean"
        },
        "isDefaultEmblemPolicyEnabled": {
          "description": "If set to true, default group emblem policies handled by GUAC will be enabled\r\n            \r\nIf set to false, default group emblem policies will not be enabled",
          "type": "boolean"
        }
      }
    },
    "Roblox.Groups.Api.GroupConfigurationResponse": {
      "description": "A response model for group configuration",
      "type": "object",
      "properties": {
        "nameMaxLength": {
          "format": "int32",
          "description": "The maximum length of a group name",
          "type": "integer"
        },
        "descriptionMaxLength": {
          "format": "int32",
          "description": "The maximum length of a group description",
          "type": "integer"
        },
        "iconMaxFileSizeMb": {
          "format": "int32",
          "description": "The maximum file size of the group icon in megabytes",
          "type": "integer"
        },
        "cost": {
          "format": "int64",
          "description": "The cost of purchasing a group",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.RecurringPayoutsConfigurationResponse": {
      "description": "A response model for recurring payout configuration",
      "type": "object",
      "properties": {
        "maxPayoutPartners": {
          "format": "int32",
          "description": "The maximum number of recurring payout partners",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.RoleConfigurationResponse": {
      "description": "A response model for role configuration",
      "type": "object",
      "properties": {
        "nameMaxLength": {
          "format": "int32",
          "description": "The maximum length of a role name",
          "type": "integer"
        },
        "descriptionMaxLength": {
          "format": "int32",
          "description": "The maximum length of a role description",
          "type": "integer"
        },
        "limit": {
          "format": "int32",
          "description": "The maximum number of roles in a group",
          "type": "integer"
        },
        "cost": {
          "format": "int64",
          "description": "The cost of purchasing a role",
          "type": "integer"
        },
        "minRank": {
          "format": "int32",
          "description": "The minimum rank a role can have",
          "type": "integer"
        },
        "maxRank": {
          "format": "int32",
          "description": "The maximum rank a role can have",
          "type": "integer"
        }
      }
    },
    "Roblox.Paging.StartIndexCursor": {
      "type": "object",
      "properties": {
        "startIndex": {
          "format": "int64",
          "type": "integer"
        },
        "discriminator": {
          "type": "string"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.GroupSearchPageResponse": {
      "description": "ApiPageResponse for catalog search",
      "type": "object",
      "properties": {
        "keyword": {
          "description": "Keyword used for search query",
          "type": "string"
        },
        "previousPageCursor": {
          "type": "string"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupSearchResponseItem"
          }
        }
      }
    },
    "Roblox.Groups.Api.GroupSearchResponseItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "memberCount": {
          "format": "int32",
          "type": "integer"
        },
        "publicEntryAllowed": {
          "type": "boolean"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "updated": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Web.Responses.Groups.GroupBasicResponse]": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Web.Responses.Groups.GroupBasicResponse"
          }
        }
      }
    },
    "Roblox.Web.Responses.Groups.GroupBasicResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "memberCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.GroupSearchMetadataResponse": {
      "description": "Response Model For Group Search Metadata Endpoint",
      "type": "object",
      "properties": {
        "SuggestedGroupKeywords": {
          "description": "Suggested Group Category translation keys",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Roblox.Web.WebAPI.ExclusiveStartRequest[System.Int64]": {
      "type": "object",
      "properties": {
        "ExclusiveStartKeyInfo": {
          "$ref": "#/definitions/Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int64]",
          "readOnly": true
        },
        "CursorRecipe": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int64]": {
      "type": "object",
      "properties": {
        "SortOrder": {
          "enum": [
            "Asc",
            "Desc"
          ],
          "type": "string",
          "readOnly": true
        },
        "PagingDirection": {
          "enum": [
            "Forward",
            "Backward"
          ],
          "type": "string",
          "readOnly": true
        },
        "Count": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.Models.Response.UserModel]": {
      "type": "object",
      "properties": {
        "previousPageCursor": {
          "type": "string"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel"
          }
        }
      }
    },
    "Roblox.Groups.Api.MembersRequest": {
      "type": "object",
      "properties": {
        "UserIds": {
          "description": "The user ids being either accepted or declined",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.GroupJoinRequestResponse]": {
      "type": "object",
      "properties": {
        "previousPageCursor": {
          "type": "string"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupJoinRequestResponse"
          }
        }
      }
    },
    "Roblox.Groups.Api.GroupJoinRequestResponse": {
      "description": "Response model for {Roblox.GroupJoinRequest}s",
      "type": "object",
      "properties": {
        "requester": {
          "$ref": "#/definitions/Roblox.Web.Responses.Users.LegacyUserResponse",
          "description": "The requester"
        },
        "created": {
          "format": "date-time",
          "description": "The DateTime the request was created",
          "type": "string"
        }
      }
    },
    "Roblox.Web.Responses.Users.LegacyUserResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "format": "int64",
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "Roblox.Groups.Api.UpdateUserRoleRequest": {
      "description": "A request model for setting a users role in a group.",
      "type": "object",
      "properties": {
        "roleId": {
          "format": "int64",
          "description": "The role in the group the user should be put into.",
          "type": "integer"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupMembershipDetailResponse]": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupMembershipDetailResponse"
          }
        }
      }
    },
    "Roblox.Groups.Api.GroupMembershipDetailResponse": {
      "description": "A group membership response model",
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupDetailResponse",
          "description": "The group"
        },
        "role": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse",
          "description": "The role"
        },
        "isPrimaryGroup": {
          "description": "Whether the group is the user's Primary Group",
          "type": "boolean"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.UserGroupMembershipResponse]": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.UserGroupMembershipResponse"
          }
        }
      }
    },
    "Roblox.Groups.Api.UserGroupMembershipResponse": {
      "description": "A users group membership response model",
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel",
          "description": "The group"
        },
        "groups": {
          "description": "The list of group memberships",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupMembershipDetailResponse"
          }
        }
      }
    },
    "Roblox.Groups.Api.JoinGroupRequest": {
      "description": "A request model for joining group.",
      "type": "object",
      "properties": {
        "captchaToken": {
          "type": "string"
        },
        "captchaProvider": {
          "type": "string"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.UserGroupRoleResponse]": {
      "type": "object",
      "properties": {
        "previousPageCursor": {
          "type": "string"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.UserGroupRoleResponse"
          }
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupDetailResponse]": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupDetailResponse"
          }
        }
      }
    },
    "Roblox.Groups.Api.GroupAllRolesResponse": {
      "description": "A group roles response model",
      "type": "object",
      "properties": {
        "groupId": {
          "format": "int64",
          "description": "The group id",
          "type": "integer"
        },
        "roles": {
          "description": "The roles in the group",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse"
          }
        }
      }
    },
    "Roblox.Groups.Api.GroupMembershipMetadataResponse": {
      "description": "A user's group membership metadata response model",
      "type": "object",
      "properties": {
        "groupId": {
          "format": "int64",
          "description": "The group id",
          "type": "integer"
        },
        "isPrimary": {
          "description": "Whether the group is primary",
          "type": "boolean"
        },
        "isPendingJoin": {
          "description": "Whether there has been a request to join this group",
          "type": "boolean"
        },
        "userRole": {
          "$ref": "#/definitions/Roblox.Groups.Api.UserGroupRoleResponse",
          "description": "User group role information"
        },
        "permissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupPermissionsModel",
          "description": "The group role's permissions"
        },
        "areGroupGamesVisible": {
          "description": "Whether group games are visible",
          "type": "boolean"
        },
        "areGroupFundsVisible": {
          "description": "Whether group funds are visible",
          "type": "boolean"
        },
        "areEnemiesAllowed": {
          "description": "Whether enemies are allowed",
          "type": "boolean"
        },
        "canConfigure": {
          "description": "If the user can configure the group",
          "type": "boolean"
        }
      }
    },
    "Roblox.Groups.Api.GroupPermissionsModel": {
      "description": "A model for group permissions/&gt;",
      "type": "object",
      "properties": {
        "groupPostsPermissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupPostsPermissionsModel",
          "description": "Group posts permissions"
        },
        "groupMembershipPermissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupMembershipPermissionsModel",
          "description": "Group membership permissions"
        },
        "groupManagementPermissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupManagementPermissionsModel",
          "description": "Group management permissions"
        },
        "groupEconomyPermissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupEconomyPermissionsModel",
          "description": "Group economy permissions"
        }
      }
    },
    "Roblox.Groups.Api.GroupPostsPermissionsModel": {
      "description": "A model representing group posts permissions",
      "type": "object",
      "properties": {
        "viewWall": {
          "description": "View wall permission",
          "type": "boolean"
        },
        "postToWall": {
          "description": "Post to wall permission",
          "type": "boolean"
        },
        "deleteFromWall": {
          "description": "Delete from wall permission",
          "type": "boolean"
        },
        "viewStatus": {
          "description": "View status permission",
          "type": "boolean"
        },
        "postToStatus": {
          "description": "Post to status permission",
          "type": "boolean"
        }
      }
    },
    "Roblox.Groups.Api.GroupMembershipPermissionsModel": {
      "description": "A model representing data about an {Roblox.Platform.Membership.IUser}",
      "type": "object",
      "properties": {
        "changeRank": {
          "description": "View wall permission",
          "type": "boolean"
        },
        "inviteMembers": {
          "description": "Post to wall permission",
          "type": "boolean"
        },
        "removeMembers": {
          "description": "Delete from wall permission",
          "type": "boolean"
        }
      }
    },
    "Roblox.Groups.Api.GroupManagementPermissionsModel": {
      "description": "A model representing data about an {Roblox.Platform.Membership.IUser}",
      "type": "object",
      "properties": {
        "manageRelationships": {
          "description": "Manage group relationships permission",
          "type": "boolean"
        },
        "manageClan": {
          "description": "Manage clan permission",
          "type": "boolean"
        },
        "viewAuditLogs": {
          "description": "View audit logs permission",
          "type": "boolean"
        }
      }
    },
    "Roblox.Groups.Api.GroupEconomyPermissionsModel": {
      "description": "A model representing data about an {Roblox.Platform.Membership.IUser}",
      "type": "object",
      "properties": {
        "spendGroupFunds": {
          "description": "Spend group funds permission",
          "type": "boolean"
        },
        "advertiseGroup": {
          "description": "Advertise group permission",
          "type": "boolean"
        },
        "createItems": {
          "description": "Create items permission",
          "type": "boolean"
        },
        "manageItems": {
          "description": "Manage items permission",
          "type": "boolean"
        },
        "addGroupPlaces": {
          "description": "Add group places permission",
          "type": "boolean"
        },
        "manageGroupGames": {
          "description": "Manage group games permission",
          "type": "boolean"
        },
        "viewGroupPayouts": {
          "description": "Manage group games permission",
          "type": "boolean"
        }
      }
    },
    "Roblox.Groups.Api.ChangeOwnerRequest": {
      "description": "A request model for changing the group owner.",
      "type": "object",
      "properties": {
        "userId": {
          "format": "int64",
          "description": "The user id.",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.GroupPermissionsResponse": {
      "description": "A group role's permissions response model",
      "type": "object",
      "properties": {
        "groupId": {
          "format": "int64",
          "description": "The group id",
          "type": "integer"
        },
        "role": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse",
          "description": "The group role"
        },
        "permissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupPermissionsModel",
          "description": "The group role's permissions"
        }
      }
    },
    "Roblox.Groups.Api.UpdatePermissionsRequest": {
      "description": "A request model for updating a group's roleset's permissions.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The permission-value pairs to be updated.",
          "type": "object",
          "properties": {
            "DeleteFromWall": {
              "type": "boolean"
            },
            "PostToWall": {
              "type": "boolean"
            },
            "InviteMembers": {
              "type": "boolean"
            },
            "PostToStatus": {
              "type": "boolean"
            },
            "RemoveMembers": {
              "type": "boolean"
            },
            "ViewStatus": {
              "type": "boolean"
            },
            "ViewWall": {
              "type": "boolean"
            },
            "ChangeRank": {
              "type": "boolean"
            },
            "AdvertiseGroup": {
              "type": "boolean"
            },
            "ManageRelationships": {
              "type": "boolean"
            },
            "AddGroupPlaces": {
              "type": "boolean"
            },
            "ViewAuditLogs": {
              "type": "boolean"
            },
            "CreateItems": {
              "type": "boolean"
            },
            "ManageItems": {
              "type": "boolean"
            },
            "SpendGroupFunds": {
              "type": "boolean"
            },
            "ManageClan": {
              "type": "boolean"
            },
            "ManageGroupGames": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupPermissionsResponse]": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupPermissionsResponse"
          }
        }
      }
    },
    "Roblox.Groups.Api.PrimaryGroupRequest": {
      "description": "A request model for setting the authenticated user's primary group.",
      "type": "object",
      "properties": {
        "groupId": {
          "format": "int64",
          "description": "The group id.",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.RelationshipsRequest": {
      "type": "object",
      "properties": {
        "GroupIds": {
          "description": "The group ids being either accepted or declined",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    },
    "Roblox.Groups.Api.PagedRequest": {
      "description": "A request model for a page of elements",
      "type": "object",
      "properties": {
        "startRowIndex": {
          "format": "int32",
          "description": "The start index of the page request",
          "type": "integer"
        },
        "maxRows": {
          "format": "int32",
          "description": "The maximum number of rows for the page request, should be at least 1.",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.GroupRelationshipsResponse": {
      "description": "A group relationships response model",
      "type": "object",
      "properties": {
        "groupId": {
          "format": "int64",
          "description": "The group id",
          "type": "integer"
        },
        "relationshipType": {
          "description": "The group relationship type",
          "enum": [
            "Allies",
            "Enemies"
          ],
          "type": "string"
        },
        "totalGroupCount": {
          "format": "int64",
          "description": "The total number of groups for this relationship type",
          "type": "integer"
        },
        "relatedGroups": {
          "description": "The related or requested groups",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupDetailResponse"
          }
        },
        "nextRowIndex": {
          "format": "int64",
          "description": "The index for the next page of related groups",
          "type": "integer"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupPayoutResponse]": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupPayoutResponse"
          }
        }
      }
    },
    "Roblox.Groups.Api.GroupPayoutResponse": {
      "description": "A group payout response",
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel",
          "description": "The group payout user"
        },
        "percentage": {
          "format": "int32",
          "description": "The group payout percentage for the user",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.PayoutRequest": {
      "description": "Multi-payout request information.",
      "type": "object",
      "properties": {
        "PayoutType": {
          "description": "The {Roblox.Groups.Api.PayoutType}.",
          "enum": [
            "FixedAmount",
            "Percentage"
          ],
          "type": "string"
        },
        "Recipients": {
          "description": "The recipients of the payouts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.PayoutRecipientRequest"
          }
        }
      }
    },
    "Roblox.Groups.Api.PayoutRecipientRequest": {
      "description": "A request model for paying out Robux.",
      "type": "object",
      "properties": {
        "recipientId": {
          "format": "int64",
          "description": "The recipient id.",
          "type": "integer"
        },
        "recipientType": {
          "description": "The recipient type.",
          "enum": [
            "User",
            "Group"
          ],
          "type": "string"
        },
        "amount": {
          "format": "int64",
          "description": "The amount to payout.",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.GroupPayoutRestrictionResponse": {
      "description": "Response model for Group Payout Restriction",
      "type": "object",
      "properties": {
        "canUseRecurringPayout": {
          "description": "Whether the group can use recurring payout feature.",
          "type": "boolean"
        },
        "canUseOneTimePayout": {
          "description": "Whether the group can use one-time payout feature.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupRoleDetailResponse]": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleDetailResponse"
          }
        }
      }
    },
    "Roblox.Groups.Api.GroupRoleDetailResponse": {
      "type": "object",
      "properties": {
        "groupId": {
          "format": "int64",
          "description": "The id of the group the role belongs to",
          "type": "integer"
        },
        "id": {
          "format": "int64",
          "description": "The role id",
          "type": "integer"
        },
        "name": {
          "description": "The role name",
          "type": "string"
        },
        "description": {
          "description": "The role description",
          "type": "string"
        },
        "rank": {
          "format": "int32",
          "description": "The role rank",
          "type": "integer"
        },
        "memberCount": {
          "format": "int64",
          "description": "The number of members in the role.",
          "type": "integer"
        }
      }
    },
    "Roblox.Groups.Api.Models.Request.CreateRoleSetRequest": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the roleset.",
          "type": "string"
        },
        "description": {
          "description": "The description of the roleset.",
          "type": "string"
        },
        "rank": {
          "format": "int32",
          "description": "The rank/positioning of the roleset.",
          "type": "integer"
        },
        "usingGroupFunds": {
          "description": "Setting to use group funds or not.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Groups.Api.Models.Request.UpdateRoleSetRequest": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the roleset.",
          "type": "string"
        },
        "description": {
          "description": "The description of the roleset.",
          "type": "string"
        },
        "rank": {
          "format": "int32",
          "description": "The rank/positioning of the roleset.",
          "type": "integer"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.SocialLinkResponse]": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.SocialLinkResponse"
          }
        }
      }
    },
    "Roblox.Groups.Api.SocialLinkResponse": {
      "description": "A social link response from a create request",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The id of the social link",
          "type": "integer"
        },
        "type": {
          "description": "What type of social media (including Roblox Group) this points to",
          "enum": [
            "Facebook",
            "Twitter",
            "YouTube",
            "Twitch",
            "GooglePlus",
            "Discord",
            "RobloxGroup"
          ],
          "type": "string"
        },
        "url": {
          "description": "The url of the link",
          "type": "string"
        },
        "title": {
          "description": "The title of the link",
          "type": "string"
        }
      }
    },
    "Roblox.Groups.Api.SocialLinkRequest": {
      "description": "An update request for a social link",
      "type": "object",
      "properties": {
        "type": {
          "description": "What type of social media this points to",
          "enum": [
            "Facebook",
            "Twitter",
            "YouTube",
            "Twitch",
            "GooglePlus",
            "Discord",
            "RobloxGroup"
          ],
          "type": "string"
        },
        "url": {
          "description": "The url of the link",
          "type": "string"
        },
        "title": {
          "description": "The title of the link",
          "type": "string"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.Models.Response.GroupWallPostModel]": {
      "type": "object",
      "properties": {
        "previousPageCursor": {
          "type": "string"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.GroupWallPostModel"
          }
        }
      }
    },
    "Roblox.Groups.Api.Models.Response.GroupWallPostModel": {
      "description": "A response model for group wall post information",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The group wall post Id.",
          "type": "integer"
        },
        "poster": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel",
          "description": "The user that posted the group wall post."
        },
        "body": {
          "description": "The group wall post body.",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "description": "When the group wall post was posted.",
          "type": "string"
        },
        "updated": {
          "format": "date-time",
          "description": "When the group wall post was last updated.",
          "type": "string"
        }
      }
    },
    "Roblox.Groups.Api.CreateWallPostRequest": {
      "description": "A request model for creating a group wall post",
      "type": "object",
      "properties": {
        "body": {
          "description": "The wall post body",
          "type": "string"
        },
        "captchaToken": {
          "type": "string"
        },
        "captchaProvider": {
          "type": "string"
        }
      }
    }
  }
}
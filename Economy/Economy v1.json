{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Economy Api v1"
  },
  "host": "economy.roblox.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/v1/assets/{assetId}/resale-data": {
      "get": {
        "tags": [
          "Resale"
        ],
        "summary": "Gets asset resale data.",
        "description": "This endpoint is only valid for resellable (limited) items.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Economy.Api.ResaleDataResponse"
            }
          },
          "400": {
            "description": "5: The asset id is invalid."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Resale:GetAssetResaleData"
          ]
        }
      }
    },
    "/v1/assets/{assetId}/resellers": {
      "get": {
        "tags": [
          "Resale"
        ],
        "summary": "Gets available resale copies of an asset.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The amount of results per request.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "enum": [
              10,
              25,
              50,
              100
            ]
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "The paging cursor for the previous or next page.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Economy.Api.ResaleRecordResponse]"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Resale:GetAssetResellers"
          ]
        }
      }
    },
    "/v1/assets/{assetId}/users/{userId}/resellable-copies": {
      "get": {
        "tags": [
          "Resale"
        ],
        "summary": "Gets resellable copies of an asset owned by the authenticated user.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Economy.Api.ResaleRecordResponse]"
            }
          },
          "400": {
            "description": "5: The asset id is invalid."
          },
          "403": {
            "description": "3: Insufficient permissions."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Resale:GetUserResaleRecords"
          ]
        }
      }
    },
    "/v1/developer-exchange/cashoutAbility": {
      "get": {
        "tags": [
          "CashOut"
        ],
        "summary": "Gets information regarding whether user can cash out, and any specific reasons why the user would not be able to cashout.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Economy.Api.Models.CashOutAbilityResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "CashOut:CashOutAbility"
          ]
        }
      }
    },
    "/v1/developer-exchange/help": {
      "get": {
        "tags": [
          "CashOut"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "CashOut:Help"
          ]
        }
      }
    },
    "/v1/developer-exchange/info": {
      "get": {
        "tags": [
          "CashOut"
        ],
        "summary": "Retrieves information needed to display in the cash out widget or page",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "fromDevExPage",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Economy.Api.Controllers.V1.CashoutInfoResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "CashOut:Info"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/addfunds/allowed": {
      "get": {
        "tags": [
          "Currency"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "2: The group is invalid."
          },
          "403": {
            "description": "3: Insufficient permissions."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Currency:GetAddFundsAllowed"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/addfunds/latest": {
      "get": {
        "tags": [
          "Currency"
        ],
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Economy.Api.Models.LatestAddFundsResponse"
            }
          },
          "400": {
            "description": "2: The group is invalid."
          },
          "403": {
            "description": "3: Insufficient permissions."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Currency:GetAddFundsLatest"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/currency": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Gets currency for the specified group.",
        "description": "Currency can only be retrieved for groups the authenticated user has permission to view group funds for.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group Id to get the currency for.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.Responses.Economy.CurrencyResponse"
            }
          },
          "400": {
            "description": "2: The group is invalid."
          },
          "403": {
            "description": "3: Insufficient permissions."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Currency:GetGroupCurrency"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/revenue/summary/{timeFrame}": {
      "get": {
        "tags": [
          "RevenueSummary"
        ],
        "summary": "Gets recent Robux revenue summary for a group.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id to get Robux summary for.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeFrame",
            "in": "path",
            "description": "The {Roblox.Economy.Api.RevenueSummaryTimeFrame} to get for.",
            "required": true,
            "type": "string",
            "enum": [
              "Day",
              "Week",
              "Month",
              "Year"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Economy.Api.RevenueSummaryResponse"
            }
          },
          "400": {
            "description": "2: The group is invalid.\r\n4: The time frame is not supported or is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "3: Insufficient permissions."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "RevenueSummary:GetGroupRevenueSummary"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/transactions": {
      "get": {
        "tags": [
          "TransactionHistory"
        ],
        "summary": "Fetches the transaction history for a group.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "transactionType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Sale",
              "Purchase",
              "AffiliateSale",
              "DevEx",
              "GroupPayout",
              "AdImpressionPayout",
              "CurrencyPurchase",
              "TradeRobux",
              "PremiumStipend",
              "PendingRobux",
              "EngagementPayout",
              "GroupEngagementPayout",
              "AdSpend",
              "Summary",
              "IndividualToGroup",
              "CSAdjustment"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The amount of results per request.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10,
            "enum": [
              10,
              25,
              50,
              100
            ]
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "The paging cursor for the previous or next page.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Economy.Api.Models.TransactionResponse]"
            }
          },
          "400": {
            "description": "2: The group is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "3: Insufficient permissions."
          },
          "503": {
            "description": "11: The requested feature is currently unavailable."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "TransactionHistory:GetGroupTransactions"
          ]
        }
      }
    },
    "/v1/resale-tax-rate": {
      "get": {
        "tags": [
          "Resale"
        ],
        "summary": "Gets asset resale related metadata.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Economy.Api.ResaleTaxRateResponse"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Resale:GetAssetResaleTaxRate"
          ]
        }
      }
    },
    "/v1/users/{userId}/currency": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Gets currency for the specified user.",
        "description": "Currency can only be retrieved for the authenticated user.",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user Id to get the currency for.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.Responses.Economy.CurrencyResponse"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "1: The user is invalid."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Currency:GetUserCurrency"
          ]
        }
      }
    },
    "/v1/developer-exchange/submit": {
      "post": {
        "tags": [
          "CashOut"
        ],
        "summary": "Submits a request to cash out.",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Economy.Api.Models.SubmitRequestModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Economy.Api.Models.SubmitResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "CashOut:Submit"
          ]
        }
      }
    },
    "/v1/groups/{groupId}/addfunds": {
      "post": {
        "tags": [
          "Currency"
        ],
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Economy.Api.Models.AddFundsRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "2: The group is invalid.\r\n14: Robux amount out of bounds.\r\n16: Insufficient Funds"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: Insufficient permissions.\r\n11: The requested feature is currently unavailable.\r\n15: Previous Transaction too Recent."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Currency:AddFunds"
          ]
        }
      }
    },
    "/v1/assets/{assetId}/resellable-copies/{userAssetId}": {
      "patch": {
        "tags": [
          "Resale"
        ],
        "summary": "Sets copies of an asset owned by the authenticated user for sale",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userAssetId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Economy.Api.UserAssetsPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "5: The asset id is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n1: The user is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: Insufficient permissions.\r\n6: The price is too low\r\n7: The price is too high\r\n8: Asset cannot be for resale\r\n9: The user does not own the asset"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Resale:PatchUserAssets"
          ]
        }
      }
    }
  },
  "definitions": {
    "Roblox.Economy.Api.Controllers.V1.CashoutInfoResponseModel": {
      "description": "The response model for the Cashout Widgent endpoint",
      "type": "object",
      "properties": {
        "hasCurrencyOperationError": {
          "type": "boolean"
        },
        "currencyOperationErrorMessage": {
          "type": "string"
        },
        "showOnlyExchangeRates": {
          "description": "Whether only exchange rates should be shown",
          "type": "boolean"
        },
        "meetsMembershipRequirements": {
          "description": "Whether the user meets membership requirements.",
          "type": "boolean"
        },
        "emailIsVerified": {
          "description": "Whether the user's email is verified",
          "type": "boolean"
        },
        "isImbursementBlacklistUser": {
          "description": "Whether the user is blacklisted from DevEx",
          "type": "boolean"
        },
        "canProceedToCashout": {
          "description": "Whether the user can proceed to cash out",
          "type": "boolean"
        },
        "showProgressBar": {
          "description": "Whether to show the progress bar",
          "type": "boolean"
        },
        "percentRobux": {
          "format": "int32",
          "description": "The user's Robux balance as a percentage of the minimum amount for DevEx.\r\nIf the user's Robux balance exceeds the target, this value will be 100.",
          "type": "integer"
        },
        "minRobuxToCashOut": {
          "format": "int64",
          "description": "The minimum amount of Robux needed for DevEx",
          "type": "integer",
          "readOnly": true
        },
        "maxRobuxCanCashOut": {
          "format": "int32",
          "description": "The max Robux that can be cashed out",
          "type": "integer",
          "readOnly": true
        },
        "lastImbursementStatus": {
          "description": "The last imbursement status for the user, if any",
          "type": "string"
        },
        "lastImbursementSubmissionDate": {
          "format": "date-time",
          "description": "The submission date for the last imbursement request, if any.",
          "type": "string"
        },
        "conversionPercent": {
          "format": "double",
          "description": "The conversion percent",
          "type": "number",
          "readOnly": true
        }
      }
    },
    "Roblox.Economy.Api.Models.CashOutAbilityResponseModel": {
      "description": "The response model for {M:Roblox.Economy.Api.Controllers.V1.CashOutController.CashOutAbility}",
      "type": "object",
      "properties": {
        "canCashOut": {
          "description": "Gets a value indicating whether the user can cash out.",
          "type": "boolean",
          "readOnly": true
        },
        "meetsPremiumRequirement": {
          "description": "Gets a value indicating whether the user meets the Premium requirement",
          "type": "boolean",
          "readOnly": true
        },
        "hasVerifiedEmail": {
          "description": "Gets a value indicating whether the user has verified email address.",
          "type": "boolean",
          "readOnly": true
        },
        "isUserBlackListed": {
          "description": "Gets a value indicating whether the user is blacklisted.",
          "type": "boolean",
          "readOnly": true
        },
        "meetsMinimumCashOutBalance": {
          "description": "Gets a value indicating whether the user meets the minimum cash out balance.",
          "type": "boolean",
          "readOnly": true
        },
        "hasCashedOutThisMonth": {
          "description": "Gets a value indicating whether the user has cashed out this month.",
          "type": "boolean",
          "readOnly": true
        },
        "lastImbursementStatusIsValid": {
          "description": "Gets a value indicating whether the user's last imbursement status, if any, is valid.",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "Roblox.Economy.Api.Models.SubmitRequestModel": {
      "description": "The request model for {M:Roblox.Economy.Api.Controllers.V1.CashOutController.Submit(Roblox.Economy.Api.Models.SubmitRequestModel)}",
      "type": "object",
      "properties": {
        "password": {
          "description": "Gets or sets the user's password.",
          "type": "string"
        },
        "paypalEmail": {
          "description": "Gets or sets the user's paypal email address.",
          "type": "string"
        },
        "firstName": {
          "description": "Gets or sets the user's first name.",
          "type": "string"
        },
        "lastName": {
          "description": "Gets or sets the user's last name",
          "type": "string"
        },
        "country": {
          "description": "Gets or sets the user's country, represented as a string.",
          "type": "string"
        },
        "robux": {
          "format": "int32",
          "description": "Gets or sets the amount of Robux to cash out for this submission.",
          "type": "integer"
        }
      }
    },
    "Roblox.Economy.Api.Models.SubmitResponseModel": {
      "description": "A data model represent response for {M:Roblox.Economy.Api.Controllers.V1.CashOutController.Submit(Roblox.Economy.Api.Models.SubmitRequestModel)}",
      "type": "object",
      "properties": {
        "submitted": {
          "description": "Gets a value indicating whether the request is successfully submitted.",
          "type": "boolean",
          "readOnly": true
        },
        "cashOutAbility": {
          "$ref": "#/definitions/Roblox.Economy.Api.Models.CashOutAbilityResponseModel",
          "description": "Gets the user's cashoutability.  Can be NULL if there are unexpected errors.",
          "readOnly": true
        },
        "errors": {
          "description": "Gets any errors.  If there are no errors, this will be NULL.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "Roblox.Web.Responses.Economy.CurrencyResponse": {
      "type": "object",
      "properties": {
        "robux": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "Roblox.Economy.Api.Models.LatestAddFundsResponse": {
      "type": "object",
      "properties": {
        "transactionDate": {
          "description": "Date of latest transfer",
          "type": "string"
        },
        "rateLimitInDays": {
          "format": "int64",
          "description": "Days from the last transfer a new transfer is allowed",
          "type": "integer"
        }
      }
    },
    "Roblox.Economy.Api.Models.AddFundsRequest": {
      "type": "object",
      "properties": {
        "robuxAmount": {
          "format": "int64",
          "description": "Robux to Transfer to Group",
          "type": "integer"
        }
      }
    },
    "Roblox.Paging.StartIndexCursor": {
      "type": "object",
      "properties": {
        "startIndex": {
          "format": "int64",
          "type": "integer"
        },
        "discriminator": {
          "type": "string"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Economy.Api.ResaleRecordResponse]": {
      "type": "object",
      "properties": {
        "previousPageCursor": {
          "type": "string"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Economy.Api.ResaleRecordResponse"
          }
        }
      }
    },
    "Roblox.Economy.Api.ResaleRecordResponse": {
      "description": "A record of a user asset up for sale.",
      "type": "object",
      "properties": {
        "userAssetId": {
          "format": "int64",
          "description": "The user asset id.",
          "type": "integer"
        },
        "seller": {
          "$ref": "#/definitions/Roblox.Web.Responses.RelatedEntityTypeResponse[Roblox.Agents.AgentType]",
          "description": "The entity selling the user asset."
        },
        "price": {
          "format": "int64",
          "description": "The price of the user asset.",
          "type": "integer"
        },
        "serialNumber": {
          "format": "int64",
          "description": "The user asset serial number.",
          "type": "integer"
        }
      }
    },
    "Roblox.Web.Responses.RelatedEntityTypeResponse[Roblox.Agents.AgentType]": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "type": {
          "enum": [
            "User",
            "Group"
          ],
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Economy.Api.ResaleRecordResponse]": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Economy.Api.ResaleRecordResponse"
          }
        }
      }
    },
    "Roblox.Economy.Api.UserAssetsPatchRequest": {
      "type": "object",
      "properties": {
        "price": {
          "format": "int64",
          "description": "Price for user asset",
          "type": "integer"
        }
      }
    },
    "Roblox.Web.WebAPI.ApiEmptyResponseModel": {
      "type": "object",
      "properties": {}
    },
    "Roblox.Economy.Api.ResaleDataResponse": {
      "description": "Resale data for an item.",
      "type": "object",
      "properties": {
        "assetStock": {
          "format": "int64",
          "description": "The total number of this item that can be sold.",
          "type": "integer"
        },
        "sales": {
          "format": "int64",
          "description": "How many of the item have been sold.",
          "type": "integer"
        },
        "numberRemaining": {
          "format": "int64",
          "description": "How many of the item remain to be sold.",
          "type": "integer"
        },
        "recentAveragePrice": {
          "format": "int64",
          "description": "The recent average selling price of the item.",
          "type": "integer"
        },
        "originalPrice": {
          "format": "int64",
          "description": "The original selling price for the item.",
          "type": "integer"
        },
        "priceDataPoints": {
          "description": "Price points for the past 180 days.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Economy.Api.ChartDataPointResponse"
          }
        },
        "volumeDataPoints": {
          "description": "Volume points for the past 180 days.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Economy.Api.ChartDataPointResponse"
          }
        }
      }
    },
    "Roblox.Economy.Api.ChartDataPointResponse": {
      "description": "Chart data point.",
      "type": "object",
      "properties": {
        "value": {
          "format": "int64",
          "description": "The value of the data point.",
          "type": "integer"
        },
        "date": {
          "format": "date-time",
          "description": "The date associated with the data point.",
          "type": "string"
        }
      }
    },
    "Roblox.Economy.Api.ResaleTaxRateResponse": {
      "type": "object",
      "properties": {
        "taxRate": {
          "format": "float",
          "description": "The tax rate for resale",
          "type": "number"
        },
        "minimumFee": {
          "format": "int64",
          "description": "The minimum marketplace fee Robux for resale",
          "type": "integer"
        }
      }
    },
    "Roblox.Economy.Api.RevenueSummaryResponse": {
      "description": "Robux revenue summary response.",
      "type": "object",
      "properties": {
        "recurringRobuxStipend": {
          "format": "int64",
          "description": "Number of Robux from recurring stipends.",
          "type": "integer"
        },
        "itemSaleRobux": {
          "format": "int64",
          "description": "Robux from sale of goods.",
          "type": "integer"
        },
        "purchasedRobux": {
          "format": "int64",
          "description": "Robux purchased.",
          "type": "integer"
        },
        "tradeSystemRobux": {
          "format": "int64",
          "description": "Robux obtained via trade.",
          "type": "integer"
        },
        "pendingRobux": {
          "format": "int64",
          "description": "Number of Robux in pending.",
          "type": "integer"
        },
        "groupPayoutRobux": {
          "format": "int64",
          "description": "Robux via group payouts.",
          "type": "integer"
        },
        "individualToGroupRobux": {
          "format": "int64",
          "description": "Robux via group payouts.",
          "type": "integer"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Economy.Api.Models.TransactionResponse]": {
      "type": "object",
      "properties": {
        "previousPageCursor": {
          "type": "string"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Economy.Api.Models.TransactionResponse"
          }
        }
      }
    },
    "Roblox.Economy.Api.Models.TransactionResponse": {
      "description": "Response model for a virtual economy transaction.",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The id",
          "type": "integer"
        },
        "created": {
          "format": "date-time",
          "description": "The timestamp the transaction occurred.",
          "type": "string"
        },
        "isPending": {
          "description": "Whether or not the transaction is pending.",
          "type": "boolean"
        },
        "agent": {
          "$ref": "#/definitions/Roblox.Economy.Api.Models.AgentResponse",
          "description": "The other agent in the transaction. Can be a user or a group."
        },
        "details": {
          "$ref": "#/definitions/Roblox.Economy.Api.Models.TransactionDetailsResponse",
          "description": "The transaction details. Includes different information based on transaction type."
        },
        "currency": {
          "$ref": "#/definitions/Roblox.Web.Responses.Economy.GenericCurrencyResponse",
          "description": "The transaction's currency amount and type."
        }
      }
    },
    "Roblox.Economy.Api.Models.AgentResponse": {
      "description": "Represents an agent, which can be either a user or a group.",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "type": {
          "enum": [
            "User",
            "Group"
          ],
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Roblox.Economy.Api.Models.TransactionDetailsResponse": {
      "description": "Base class that represents the item in the transaction.",
      "type": "object",
      "properties": {}
    },
    "Roblox.Web.Responses.Economy.GenericCurrencyResponse": {
      "type": "object",
      "properties": {
        "amount": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "enum": [
            "Robux",
            "Tickets"
          ],
          "type": "string"
        }
      }
    }
  }
}
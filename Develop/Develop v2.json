{
  "swagger": "2.0",
  "info": {
    "title": "Develop Api v2",
    "version": "v2"
  },
  "host": "develop.roblox.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/v2/assets/{id}/versions": {
      "get": {
        "tags": [
          "AssetsV2"
        ],
        "summary": "Retrieves asset information for the specified asset ID. The authenticated user must be able to manage the asset\r\nor granted by package permission.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the asset.Roblox.Platform.Assets.IAsset",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "description": "The ID of the place.Roblox.Platform.Assets.IPlace",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "enum": [
              10,
              25,
              50,
              100
            ]
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sort by version number, default is desc.",
            "type": "string",
            "default": "Desc",
            "enum": [
              "Asc",
              "Desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Api.Develop.AssetVersion]"
            }
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "AssetsV2:GetAssetVersionsByAssetIdAndPlaceId"
          ]
        }
      }
    },
    "/v2/places/{placeId}": {
      "get": {
        "tags": [
          "PlacesV2"
        ],
        "summary": "Gets the place configuration for the place with the id placeId",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The place id for the place to be updated.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.PlaceModelV2"
            }
          },
          "403": {
            "description": "Authenticated user is not authorized to manage this place."
          },
          "404": {
            "description": "placeId Place not found."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "PlacesV2:GetPlaceConfiguration"
          ]
        }
      },
      "patch": {
        "tags": [
          "PlacesV2"
        ],
        "summary": "Updates the place configuration for the place with the id placeId",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The place id for the place to be updated.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "configuration",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.PlaceConfigurationModelV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.PlaceModelV2"
            }
          },
          "403": {
            "description": "Authenticated user is not authorized to manage this place.\r\n0: Token Validation Failed"
          },
          "404": {
            "description": "placeId Place not found."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "PlacesV2:UpdatePlaceConfiguration"
          ]
        }
      }
    },
    "/v2/universes/{universeId}/configuration": {
      "patch": {
        "tags": [
          "UniverseSettings"
        ],
        "summary": "Update universe settings for an owned universe.\r\nV2 Contains data for avatar scale and asset override.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "universeId",
            "description": "The universeId.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "model",
            "description": "The Roblox.Api.Develop.Models.UniverseSettingsRequest model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseSettingsRequestV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseSettingsResponseV2"
            }
          },
          "400": {
            "description": "1: The universe does not exist.\r\n3: Invalid UniverseAvatarType.\r\n4: Invalid UniverseScaleType.\r\n5: Invalid UniverseAnimationType.\r\n6: Invalid UniverseCollisionType.\r\n7: New universe name or description has been rejected.\r\n8: New universe name is too long.\r\n10: Invalid UniverseBodyType.\r\n11: Invalid UniverseJointPositioningType.\r\n12: The universe has no root place.\r\n13: At least one playable device must be provided.\r\n15: Price is required when isForSale is true.\r\n16: This game cannot be offered for sale because it is not public.\r\n17: This game cannot be offered for sale because it has private servers enabled.\r\n18: The game price is outside of the allowed range.\r\n19: Invalid genre.\r\n20: The request body is missing.\r\n21: Invalid device type.\r\n22: Invalid asset type.\r\n23: Invalid value, the min must be less than or equal to the max\r\n24: Invalid scale value\r\n28: OptIn/Out Regions Not Supported.\r\n29: Luobu app terms of service user agreement is missing."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You are not authorized to configure this universe.\r\n14: You are not authorized to sell games.\r\n30: Unknown error while updating Opt in out region."
          },
          "409": {
            "description": "9: Failed to shutdown all intances of game after changing AvatarType. The change has been reverted."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "UniverseSettings:UpdateUniverseSettingsV2"
          ]
        }
      }
    },
    "/v2/teamtest/{placeId}": {
      "delete": {
        "tags": [
          "TeamTestV2"
        ],
        "summary": "Close a game instance that is being used for team testing",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "placeId",
            "description": "The Id of the place we are setting the metadata for.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "gameId",
            "description": "the Guid of the game instance System.Guid",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "TeamTestV2:CloseTeamTestGame"
          ]
        }
      }
    }
  },
  "definitions": {
    "Roblox.Api.Develop.AssetVersion": {
      "description": "Model of an asset version.",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "The VersionID of the asset version.",
          "type": "integer"
        },
        "assetId": {
          "format": "int64",
          "description": "The ID of the asset.",
          "type": "integer"
        },
        "assetVersionNumber": {
          "format": "int32",
          "description": "The version number.",
          "type": "integer"
        },
        "creatorType": {
          "description": "Type of the asset version creator.",
          "type": "string"
        },
        "creatorTargetId": {
          "format": "int64",
          "description": "ID of the asset version creator.",
          "type": "integer"
        },
        "creatingUniverseId": {
          "format": "int64",
          "description": "ID of the universe this asset version was created in.",
          "type": "integer"
        },
        "created": {
          "format": "date-time",
          "description": "The created date of this asset version.",
          "type": "string"
        },
        "isEqualToCurrentPublishedVersion": {
          "description": "Indicates if this version is same to current published version.\r\nThis property is available on /v1/{assetId}/published-versions and /v1/{assetId}/version/{versionNumber}.",
          "type": "boolean"
        },
        "isPublished": {
          "description": "Indicates if this version is / was published.\r\nThis property is available on /v1/{assetId}/saved-versions.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Api.Develop.Models.PlaceConfigurationModelV2": {
      "description": "A model containing information about a place to be configured",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name for the place.",
          "type": "string"
        },
        "description": {
          "description": "The new description for the place.",
          "type": "string"
        },
        "maxPlayerCount": {
          "format": "int32",
          "description": "The max number of players for the place.",
          "type": "integer"
        },
        "socialSlotType": {
          "description": "The social slot type for the place. Determines how users are placed into servers.\r\n Examples: \r\n     Automatic,\r\n     Empty,\r\n     Custom",
          "type": "string"
        },
        "customSocialSlotsCount": {
          "format": "int32",
          "description": "The number of social slots for the place when the slot type is custom.",
          "type": "integer"
        },
        "allowCopying": {
          "description": "Determines if copying of the place is allowed.",
          "type": "boolean"
        },
        "allowedGearTypes": {
          "description": "List of allowed gear types",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isAllGenresAllowed": {
          "description": "If all genres are allowed, or only the experience type",
          "type": "boolean"
        }
      }
    },
    "Roblox.Api.Develop.Models.PlaceModelV2": {
      "description": "A model containing information about a place",
      "type": "object",
      "properties": {
        "maxPlayerCount": {
          "format": "int32",
          "description": "The max number of players for the place.",
          "type": "integer"
        },
        "socialSlotType": {
          "description": "The social slot type for the place. Determines how users are placed into servers.\r\n Examples: \r\n     Automatic,\r\n     Empty,\r\n     Custom",
          "type": "string"
        },
        "customSocialSlotsCount": {
          "format": "int32",
          "description": "The number of social slots for the place when the slot type is custom.",
          "type": "integer"
        },
        "allowCopying": {
          "description": "Determines if copying of the place is allowed.",
          "type": "boolean"
        },
        "currentSavedVersion": {
          "format": "int32",
          "description": "The current saved version number of the place.",
          "type": "integer"
        },
        "isAllGenresAllowed": {
          "description": "Whether all genres allowed in the place.",
          "type": "boolean"
        },
        "allowedGearTypes": {
          "description": "Types of Roblox gear that are allowed to exist in the place.\r\nValid values are from amp::AssetCategory",
          "type": "array",
          "items": {
            "format": "int32",
            "description": "The types of Gear that can be worn inside a place.\r\nValid values are derived from amp::AssetCategory ['Invalid' = 0, 'Melee' = 8, 'Ranged' = 9, 'Explosive' = 10, 'PowerUps' = 11, 'Navigation' = 12, 'Musical' = 13, 'Social' = 14, 'Building' = 21, 'PersonalTransport' = 22]",
            "enum": [
              0,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              21,
              22
            ],
            "type": "integer"
          }
        },
        "maxPlayersAllowed": {
          "format": "int32",
          "description": "The maximum allowed number of players for the place that the user can set, based on user roleset.",
          "type": "integer"
        },
        "id": {
          "format": "int64",
          "description": "Returns the place id.",
          "type": "integer"
        },
        "universeId": {
          "format": "int64",
          "description": "Returns the id of the place's universe, or null - if the place is not part of a universe.",
          "type": "integer"
        },
        "name": {
          "description": "Returns the place name.",
          "type": "string"
        },
        "description": {
          "description": "Returns the place description.",
          "type": "string"
        },
        "isRootPlace": {
          "description": "Returns whether this place is the root place.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Api.Develop.Models.UniverseModerationPolicyStatus": {
      "description": "Represents a universe moderation policy status",
      "type": "object",
      "properties": {
        "region": {
          "format": "int32",
          "description": "The region policy label ['Unknown' = 0, 'China' = 1]",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "status": {
          "description": "The status of the universe",
          "type": "string"
        }
      }
    },
    "Roblox.Api.Develop.Models.UniversePluginPermissions": {
      "description": "Plugin permissions for third party.\r\nCurrently, this is a part of configuration, but will be separated into permission system in the future.",
      "type": "object",
      "properties": {
        "IsThirdPartyTeleportAllowed": {
          "description": "Indicates if it allows game server to teleport to other games out of your universe.",
          "type": "boolean"
        },
        "IsThirdPartyAssetAllowed": {
          "description": "Indicates if it allows players to purchase items not created by you.",
          "type": "boolean"
        },
        "IsThirdPartyPurchaseAllowed": {
          "description": "Indicates if it allows script execution or insertion of models not under your control.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Api.Develop.Models.UniverseSettingsRequestV2": {
      "description": "Model for UniverseSettings patch requests",
      "type": "object",
      "properties": {
        "allowPrivateServers": {
          "description": "If the universe allows the use of private servers.",
          "type": "boolean"
        },
        "privateServerPrice": {
          "format": "int64",
          "description": "The price to purchase a private server in robux.",
          "type": "integer"
        },
        "name": {
          "description": "The name of the universe.",
          "type": "string"
        },
        "description": {
          "description": "The description of the universe.",
          "type": "string"
        },
        "universeAvatarType": {
          "format": "int32",
          "description": "Which avatar types are allowed in the universe.",
          "enum": [
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "universeAnimationType": {
          "format": "int32",
          "description": "Whether custom animations are allowed in the universe.",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "universeCollisionType": {
          "format": "int32",
          "description": "What type of collisions are used by the universe.",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "universeJointPositioningType": {
          "format": "int32",
          "description": "What avatar joint positioning type is allowed by the universe.",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "isArchived": {
          "description": "Archive status of the universe.",
          "type": "boolean"
        },
        "isFriendsOnly": {
          "description": "Whether game access is limited to friends for user-owned games or group members for group-owned games.",
          "type": "boolean"
        },
        "genre": {
          "format": "int32",
          "description": "Game genre.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14
          ],
          "type": "integer"
        },
        "playableDevices": {
          "description": "List of device types this game can be played on.",
          "type": "array",
          "items": {
            "format": "int32",
            "description": " ['Computer' = 1, 'Phone' = 2, 'Tablet' = 3, 'Console' = 4, 'VR' = 5]",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "type": "integer"
          }
        },
        "isForSale": {
          "description": "Whether the game is offered for sale.",
          "type": "boolean"
        },
        "price": {
          "format": "int64",
          "description": "Price of the game, in Robux.",
          "type": "integer"
        },
        "universeAvatarAssetOverrides": {
          "description": "A list of avatar asset overrides.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Platform.UniverseSettings.UniverseAvatarAssetOverrideResponseModel"
          }
        },
        "universeAvatarMinScales": {
          "$ref": "#/definitions/Roblox.Web.Responses.Avatar.ScaleModel"
        },
        "universeAvatarMaxScales": {
          "$ref": "#/definitions/Roblox.Web.Responses.Avatar.ScaleModel"
        },
        "studioAccessToApisAllowed": {
          "description": "Whether Studio can access data stores of this universe.",
          "type": "boolean"
        },
        "permissions": {
          "$ref": "#/definitions/Roblox.Api.Develop.Models.UniversePluginPermissions"
        },
        "optInRegions": {
          "description": "A list of opt in region.",
          "type": "array",
          "items": {
            "format": "int32",
            "description": "Universe opt in regions ['Unknown' = 0, 'China' = 1]",
            "enum": [
              0,
              1
            ],
            "type": "integer"
          }
        },
        "optOutRegions": {
          "description": "A list of opt out region.",
          "type": "array",
          "items": {
            "format": "int32",
            "description": "Universe opt in regions ['Unknown' = 0, 'China' = 1]",
            "enum": [
              0,
              1
            ],
            "type": "integer"
          }
        }
      }
    },
    "Roblox.Api.Develop.Models.UniverseSettingsResponseV2": {
      "description": "Model for UniverseSettings controller responses",
      "type": "object",
      "properties": {
        "allowPrivateServers": {
          "description": "If the universe allows the use of private servers.",
          "type": "boolean"
        },
        "privateServerPrice": {
          "format": "int64",
          "description": "The price to purchase a private server in robux.",
          "type": "integer"
        },
        "optInRegions": {
          "description": "The regions the universe has opted in for",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseModerationPolicyStatus"
          }
        },
        "id": {
          "format": "int64",
          "description": "The universe Id.",
          "type": "integer"
        },
        "name": {
          "description": "The universe name.",
          "type": "string"
        },
        "description": {
          "description": "The universe description.",
          "type": "string"
        },
        "universeAvatarType": {
          "format": "int32",
          "description": "Which avatar types are allowed in the universe. ['MorphToR6' = 1, 'PlayerChoice' = 2, 'MorphToR15' = 3]",
          "enum": [
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "universeAnimationType": {
          "format": "int32",
          "description": "Whether custom animations are allowed in the universe. ['Standard' = 1, 'PlayerChoice' = 2]",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "universeCollisionType": {
          "format": "int32",
          "description": "What type of collisions are used by the universe. ['InnerBox' = 1, 'OuterBox' = 2]",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "universeJointPositioningType": {
          "format": "int32",
          "description": "What avatar joint positioning is allowed by the universe. ['Standard' = 1, 'ArtistIntent' = 2]",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "isArchived": {
          "description": "Archive status of the universe",
          "type": "boolean"
        },
        "isFriendsOnly": {
          "description": "Whether game access is limited to friends for user-owned games or group members for group-owned games.",
          "type": "boolean"
        },
        "genre": {
          "format": "int32",
          "description": "Game genre. ['All' = 0, 'Tutorial' = 1, 'Scary' = 2, 'TownAndCity' = 3, 'War' = 4, 'Funny' = 5, 'Fantasy' = 6, 'Adventure' = 7, 'SciFi' = 8, 'Pirate' = 9, 'FPS' = 10, 'RPG' = 11, 'Sports' = 12, 'Ninja' = 13, 'WildWest' = 14]",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14
          ],
          "type": "integer"
        },
        "playableDevices": {
          "description": "List of device types this game can be played on.",
          "type": "array",
          "items": {
            "format": "int32",
            "description": " ['Computer' = 1, 'Phone' = 2, 'Tablet' = 3, 'Console' = 4, 'VR' = 5]",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "type": "integer"
          }
        },
        "isForSale": {
          "description": "Whether the game is offered for sale.",
          "type": "boolean"
        },
        "price": {
          "format": "int64",
          "description": "Price of the game, in Robux.",
          "type": "integer"
        },
        "universeAvatarAssetOverrides": {
          "description": "A collection of avatar asset settings allowed by the universe.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Platform.UniverseSettings.UniverseAvatarAssetOverrideResponseModel"
          }
        },
        "universeAvatarMinScales": {
          "$ref": "#/definitions/Roblox.Web.Responses.Avatar.ScaleModel"
        },
        "universeAvatarMaxScales": {
          "$ref": "#/definitions/Roblox.Web.Responses.Avatar.ScaleModel"
        },
        "studioAccessToApisAllowed": {
          "description": "Whether Studio can access data stores of this universe.",
          "type": "boolean"
        },
        "permissions": {
          "$ref": "#/definitions/Roblox.Api.Develop.Models.UniversePluginPermissions"
        }
      }
    },
    "Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.String]": {
      "type": "object",
      "properties": {
        "SortOrder": {
          "format": "int32",
          "description": " ['Asc' = 1, 'Desc' = 2]",
          "enum": [
            1,
            2
          ],
          "type": "integer",
          "readOnly": true
        },
        "PagingDirection": {
          "format": "int32",
          "description": " ['Forward' = 1, 'Backward' = 2]",
          "enum": [
            1,
            2
          ],
          "type": "integer",
          "readOnly": true
        },
        "Count": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "Roblox.Platform.UniverseSettings.UniverseAvatarAssetOverrideResponseModel": {
      "type": "object",
      "properties": {
        "assetID": {
          "format": "int64",
          "type": "integer"
        },
        "assetTypeID": {
          "format": "int32",
          "type": "integer"
        },
        "isPlayerChoice": {
          "type": "boolean"
        }
      }
    },
    "Roblox.Web.Responses.Avatar.ScaleModel": {
      "type": "object",
      "properties": {
        "height": {
          "format": "double",
          "type": "number"
        },
        "width": {
          "format": "double",
          "type": "number"
        },
        "head": {
          "format": "double",
          "type": "number"
        },
        "depth": {
          "format": "double",
          "type": "number"
        },
        "proportion": {
          "format": "double",
          "type": "number"
        },
        "bodyType": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "Roblox.Web.WebAPI.ApiEmptyResponseModel": {
      "type": "object"
    },
    "Roblox.Web.WebAPI.ExclusiveStartRequest[System.String]": {
      "type": "object",
      "properties": {
        "ExclusiveStartKeyInfo": {
          "$ref": "#/definitions/Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.String]"
        },
        "CursorRecipe": {
          "type": "string"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Api.Develop.AssetVersion]": {
      "type": "object",
      "properties": {
        "previousPageCursor": {
          "type": "string"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Api.Develop.AssetVersion"
          }
        }
      }
    }
  }
}